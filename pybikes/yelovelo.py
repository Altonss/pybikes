# -*- coding: utf-8 -*-
# Copyright (C) 2023, Martín González Gómez <m@martingonzalez.net>
# Distributed under the AGPL license, see LICENSE.txt

import json
import re

from pybikes import BikeShareSystem, BikeShareStation, PyBikesScraper


BASE_URL = 'https://yelo.agglo-larochelle.fr/plan-interactif/'
FEED_URL = '{endpoint}/pois'
STATION_ENDPOINT = '{endpoint}/pois/{station_id}'


class YeloVelo(BikeShareSystem):
    sync = False

    def __init__(self, tag, meta):
        super(YeloVelo, self).__init__(tag, meta)

    @staticmethod
    def authorize(scraper):
        # auth token is returned in the html
        raw = scraper.request(BASE_URL)
        token = re.search(r'token: ["\'](.*?)["\']', raw)
        return {'Authorization': 'Bearer ' + token.group(1)}
    
    @staticmethod
    def get_endpoint(scraper):
        # endpoint url looks too autogenerated, let's extract
        raw = scraper.request(BASE_URL)
        api = re.search(r'api: ["\'](.*?)["\']', raw)
        return api.group(1)

    def update(self, scraper=None):
        if scraper is None:
            scraper = PyBikesScraper()

        scraper.headers.update(YeloVelo.authorize(scraper))
        self.endpoint = YeloVelo.get_endpoint(scraper)

        pois = json.loads(scraper.request(FEED_URL.format(endpoint=self.endpoint)))

        # endpoint returns many public transport pois: bike sharing is "10"
        # https://releases-uxb3m2jh5q-ew.a.run.app/poi-categories
        stations_data = filter(lambda s: s['category_id'] == 10, pois)

        stations = []
        for station_data in stations_data:
            station = YeloVeloStation(station_data, self.endpoint)
            stations.append(station)

        self.stations = stations


class YeloVeloStation(BikeShareStation):
    def __init__(self, data, endpoint):
        super(YeloVeloStation, self).__init__()

        self.endpoint = endpoint
        self.latitude = float(data['latitude'])
        self.longitude = float(data['longitude'])
        self.name = data['name']
        self.extra = {
            'uid': data['id']
        }

    def update(self, scraper=None):
        if scraper is None:
            scraper = PyBikesScraper()

        station_url = STATION_ENDPOINT.format(endpoint=self.endpoint, station_id=self.extra['uid'])
        response = json.loads(scraper.request(station_url))

        # when no bikes are available data comes as empty
        if not response['data']:
            self.bikes = 0
            return

        station_data = response['data']['vehicle']

        bikes = int(station_data['available'])
        slots = int(station_data['total'])

        self.bikes = bikes
        self.free = slots - bikes

        has_ebikes = list(filter(lambda item: item.get('bike').get('electric'), station_data['bikes']))
        ebikes = len(has_ebikes)

        self.extra = {
            'normal_bikes': bikes - ebikes,
            'has_ebikes': any(has_ebikes),
            'ebikes': ebikes,
            'slots': slots
        }
